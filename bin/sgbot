#!python
import argparse
import json
import logging
import os
import sys

from storygraph_bot.backbone import sgbot
from storygraph_bot.util import generic_error_info

logger = logging.getLogger('sgbot.sgbot')

def cleanup(stories_path, verify_deletion=True):

    try:
        print('Files to be deleted:')
        os.system(f'ls {stories_path}/cache/cache_* {stories_path}/tmp/*.json {stories_path}/tmp/console_output.log {stories_path}/tracked_stories/*.txt')
    except:
        generic_error_info()

    if( verify_deletion is True ):
        remove = input("Are you sure you want to delete cache? y or n\n")
    else:
        remove = 'y'

    if remove in ['y','yes']:
        try:
            os.system(f'rm -f {stories_path}/cache/cache_* {stories_path}/tmp/*.json {stories_path}/tmp/console_output.log {stories_path}/tracked_stories/*.txt')
            print('Deleted!')
        except:
            generic_error_info()

def get_generic_args():
    parser = argparse.ArgumentParser(formatter_class=lambda prog: argparse.HelpFormatter(prog, max_help_position=30), description='Bot that tracks and tweets about developing stories in near-realtime.')
    parser.add_argument('--start-datetime', default='', help='"YYYY-mm-DD HH:MM:SS" datetime for filtering graphs.')
    parser.add_argument('--end-datetime', default='', help='"YYYY-mm-DD HH:MM:SS" datetime for filtering graphs.')    
    
    parser.add_argument('-a','--activation-degree', dest='activation_degree', default=4.0, type=float, help='The minimum average degree for selected top stories.')
    parser.add_argument('--cleanup', action='store_true', help='Delete cache and intermediate files.')
    parser.add_argument('-ol', '--overlap-threshold', default=0.9, type=float, help='The similarity threshold for matching two stories.')
    parser.add_argument('-p', '--sgbot-path', default=os.getcwd() + '/SGBOT_FILES', help='Path for storing all bot-associated files (e.g., storing stories).')

    return(parser)

def main():

    if( len(sys.argv) > 1 ):
        if( sys.argv[1] == '-v' or sys.argv[1] == '--version' ):
            
            from storygraph_bot.version import __appversion__
            print(__appversion__)
            return

    args = get_generic_args().parse_args()
    if( args.cleanup is True ):
        cleanup(args.sgbot_path)
        return
    
    sgbot(args.sgbot_path, args.activation_degree, args.overlap_threshold, args.start_datetime, args.end_datetime)

if __name__ == "__main__":
    main()
